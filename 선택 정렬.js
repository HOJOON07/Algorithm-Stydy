const arr = [2, 4, 3, 1, 9, 6, 8, 7, 5];

function selecttoinSort(arr) {
  for (let i = 0; i < arr.length; i++) {
    let minIndex = i;
    for (let j = i + 1; j < arr.length; j++) {
      if (arr[minIndex] > arr[j]) {
        minIndex = j;
      }
    }

    let temp = arr[i];

    arr[i] = arr[minIndex];

    arr[minIndex] = temp;
  }
}
// 제공해주신 코드에서 최솟값을 찾는 과정은 다음과 같습니다:

// 1. **최소 인덱스 설정**: 각 외부 `for` 루프의 반복마다, `minIndex`를 현재 인덱스 `i`로 설정합니다. 이는 현재 단계에서 최소값을 찾기 시작하는 위치를 나타냅니다.

// 2. **내부 루프에서 최소값 탐색**: 내부 `for` 루프(`j = i + 1` 부터 시작)는 `arr[minIndex]`와 `arr[j]`를 비교하여, 현재 `minIndex` 위치의 요소가 `arr[j]`보다 큰 경우 `minIndex`를 `j`로 업데이트합니다. 이는 `arr[j]`가 현재까지 발견된 최소값보다 더 작다는 것을 의미합니다.

// 3. **최소값 교환**: 내부 루프가 종료되면, 현재 단계에서 발견된 최소값(위치 `minIndex`)과 현재 위치 `i`의 값을 교환합니다.

// 이 과정을 각 단계마다 반복하여, 전체 배열이 오름차순으로 정렬됩니다.

// 예를 들어, `arr` 배열을 단계별로 살펴보면 다음과 같습니다:

// - 첫 번째 단계(`i = 0`): `minIndex`는 0으로 시작하고, 내부 루프는 배열의 나머지 부분(`4, 3, 1, ...`)을 확인하며 최소값을 찾습니다. 이 경우, 최소값은 1이며, 이 값은 `arr[3]`에 위치합니다. 따라서 `minIndex`는 3으로 업데이트됩니다. 그 후, `arr[0]`과 `arr[3]`의 값을 교환합니다.

// - 두 번째 단계(`i = 1`): 이제 `arr[1]`부터 배열의 나머지 부분에서 최소값을 찾습니다. 이 과정은 배열이 완전히 정렬될 때까지 계속됩니다.

// 이러한 방식으로, 선택 정렬 알고리즘은 매 단계에서 최소값을 찾아 배열을 정렬합니다.
